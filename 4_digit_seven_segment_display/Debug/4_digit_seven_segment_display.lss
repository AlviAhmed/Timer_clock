
4_digit_seven_segment_display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000005d2  00000666  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800120  00800120  00000686  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000686  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010e5  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001d2  00000000  00000000  00001905  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000058a  00000000  00000000  00001ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  00002064  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000337  00000000  00000000  000022e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000021d  00000000  00000000  00002617  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00002834  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 9c 02 	jmp	0x538	; 0x538 <__vector_11>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	5f 02       	muls	r21, r31
  6a:	51 01       	movw	r10, r2
  6c:	6f 01       	movw	r12, r30
  6e:	8d 01       	movw	r16, r26
  70:	ab 01       	movw	r20, r22
  72:	c9 01       	movw	r24, r18
  74:	e7 01       	movw	r28, r14
  76:	05 02       	muls	r16, r21
  78:	23 02       	muls	r18, r19
  7a:	41 02       	muls	r20, r17

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e2 ed       	ldi	r30, 0xD2	; 210
  90:	f5 e0       	ldi	r31, 0x05	; 5
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a0 32       	cpi	r26, 0x20	; 32
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a0 e2       	ldi	r26, 0x20	; 32
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a6 32       	cpi	r26, 0x26	; 38
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 5d 00 	call	0xba	; 0xba <main>
  b2:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	50 9a       	sbi	0x0a, 0	; 10
  bc:	51 9a       	sbi	0x0a, 1	; 10
  be:	52 9a       	sbi	0x0a, 2	; 10
  c0:	53 9a       	sbi	0x0a, 3	; 10
  c2:	55 9a       	sbi	0x0a, 5	; 10
	PORTC |= (1 << segment_6);
	_delay_ms(n);
	
	/////////////////////
	
	num_1_on();
  c4:	56 9a       	sbi	0x0a, 6	; 10
  c6:	57 9a       	sbi	0x0a, 7	; 10
  c8:	3d 9a       	sbi	0x07, 5	; 7
  ca:	3c 9a       	sbi	0x07, 4	; 7
  cc:	3a 9a       	sbi	0x07, 2	; 7
  ce:	3b 9a       	sbi	0x07, 3	; 7
  d0:	39 9a       	sbi	0x07, 1	; 7
  d2:	22 9a       	sbi	0x04, 2	; 4
  d4:	38 9a       	sbi	0x07, 0	; 7
  d6:	40 9a       	sbi	0x08, 0	; 8
  d8:	42 9a       	sbi	0x08, 2	; 8
	_delay_ms(m);
	num_1_off();
  da:	2a 9a       	sbi	0x05, 2	; 5
  dc:	44 9a       	sbi	0x08, 4	; 8
	
	num_2_on();
  de:	45 9a       	sbi	0x08, 5	; 8
  e0:	43 9a       	sbi	0x08, 3	; 8
  e2:	41 9a       	sbi	0x08, 1	; 8
  e4:	58 98       	cbi	0x0b, 0	; 11
  e6:	59 98       	cbi	0x0b, 1	; 11
  e8:	5a 98       	cbi	0x0b, 2	; 11
  ea:	5b 98       	cbi	0x0b, 3	; 11
  ec:	e1 e8       	ldi	r30, 0x81	; 129
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 60       	ori	r24, 0x08	; 8
	_delay_ms(m);
	num_2_off();
  f4:	80 83       	st	Z, r24
  f6:	af e6       	ldi	r26, 0x6F	; 111
	
	
	num_3_on();
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	8c 91       	ld	r24, X
  fc:	82 60       	ori	r24, 0x02	; 2
  fe:	8c 93       	st	X, r24
 100:	78 94       	sei
 102:	8f e1       	ldi	r24, 0x1F	; 31
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	90 93 89 00 	sts	0x0089, r25
 10a:	80 93 88 00 	sts	0x0088, r24
	_delay_ms(m);
	num_3_off();
 10e:	80 81       	ld	r24, Z
 110:	83 60       	ori	r24, 0x03	; 3
	
	
	num_4_on();
 112:	80 83       	st	Z, r24
 114:	ff cf       	rjmp	.-2      	; 0x114 <main+0x5a>

00000116 <num_1_on>:
 116:	45 98       	cbi	0x08, 5	; 8
 118:	42 98       	cbi	0x08, 2	; 8
 11a:	08 95       	ret

0000011c <num_2_on>:
 11c:	43 98       	cbi	0x08, 3	; 8
 11e:	45 98       	cbi	0x08, 5	; 8
 120:	44 98       	cbi	0x08, 4	; 8
 122:	2a 98       	cbi	0x05, 2	; 5
 124:	40 98       	cbi	0x08, 0	; 8
 126:	08 95       	ret

00000128 <num_3_on>:
	_delay_ms(m);
	num_4_off();
 128:	43 98       	cbi	0x08, 3	; 8
 12a:	45 98       	cbi	0x08, 5	; 8
	

	num_5_on();
 12c:	44 98       	cbi	0x08, 4	; 8
 12e:	42 98       	cbi	0x08, 2	; 8
 130:	40 98       	cbi	0x08, 0	; 8
 132:	08 95       	ret

00000134 <num_4_on>:
 134:	41 98       	cbi	0x08, 1	; 8
 136:	44 98       	cbi	0x08, 4	; 8
 138:	45 98       	cbi	0x08, 5	; 8
 13a:	42 98       	cbi	0x08, 2	; 8
 13c:	08 95       	ret

0000013e <num_5_on>:
 13e:	43 98       	cbi	0x08, 3	; 8
 140:	41 98       	cbi	0x08, 1	; 8
	_delay_ms(m);
	num_5_off();
 142:	44 98       	cbi	0x08, 4	; 8
 144:	42 98       	cbi	0x08, 2	; 8
	
	
	num_6_on();
 146:	40 98       	cbi	0x08, 0	; 8
 148:	08 95       	ret

0000014a <num_6_on>:
 14a:	43 98       	cbi	0x08, 3	; 8
 14c:	41 98       	cbi	0x08, 1	; 8
 14e:	44 98       	cbi	0x08, 4	; 8
 150:	42 98       	cbi	0x08, 2	; 8
 152:	40 98       	cbi	0x08, 0	; 8
 154:	2a 98       	cbi	0x05, 2	; 5
 156:	08 95       	ret

00000158 <num_7_on>:
 158:	43 98       	cbi	0x08, 3	; 8
 15a:	45 98       	cbi	0x08, 5	; 8
	_delay_ms(m);
	num_6_off();
 15c:	42 98       	cbi	0x08, 2	; 8
 15e:	08 95       	ret

00000160 <num_8_on>:

	
	num_7_on();
 160:	41 98       	cbi	0x08, 1	; 8
 162:	43 98       	cbi	0x08, 3	; 8
 164:	45 98       	cbi	0x08, 5	; 8
 166:	44 98       	cbi	0x08, 4	; 8
 168:	2a 98       	cbi	0x05, 2	; 5
 16a:	40 98       	cbi	0x08, 0	; 8
 16c:	42 98       	cbi	0x08, 2	; 8
 16e:	08 95       	ret

00000170 <num_9_on>:
 170:	41 98       	cbi	0x08, 1	; 8
 172:	43 98       	cbi	0x08, 3	; 8
 174:	45 98       	cbi	0x08, 5	; 8
	_delay_ms(m);
	num_7_off();
 176:	44 98       	cbi	0x08, 4	; 8
 178:	42 98       	cbi	0x08, 2	; 8
	
	
	num_8_on();
 17a:	08 95       	ret

0000017c <num_0_on>:
 17c:	41 98       	cbi	0x08, 1	; 8
 17e:	43 98       	cbi	0x08, 3	; 8
 180:	45 98       	cbi	0x08, 5	; 8
 182:	2a 98       	cbi	0x05, 2	; 5
 184:	42 98       	cbi	0x08, 2	; 8
 186:	40 98       	cbi	0x08, 0	; 8
 188:	08 95       	ret

0000018a <num_1_off>:
 18a:	45 9a       	sbi	0x08, 5	; 8
 18c:	42 9a       	sbi	0x08, 2	; 8
 18e:	08 95       	ret

00000190 <num_2_off>:
	_delay_ms(m);
	num_8_off();
 190:	43 9a       	sbi	0x08, 3	; 8
 192:	45 9a       	sbi	0x08, 5	; 8

	
	num_9_on();
 194:	44 9a       	sbi	0x08, 4	; 8
 196:	2a 9a       	sbi	0x05, 2	; 5
 198:	40 9a       	sbi	0x08, 0	; 8
 19a:	08 95       	ret

0000019c <num_3_off>:
 19c:	43 9a       	sbi	0x08, 3	; 8
 19e:	45 9a       	sbi	0x08, 5	; 8
 1a0:	44 9a       	sbi	0x08, 4	; 8
 1a2:	42 9a       	sbi	0x08, 2	; 8
 1a4:	40 9a       	sbi	0x08, 0	; 8
 1a6:	08 95       	ret

000001a8 <num_4_off>:
 1a8:	41 9a       	sbi	0x08, 1	; 8
	_delay_ms(m);
	num_9_off();
 1aa:	44 9a       	sbi	0x08, 4	; 8
 1ac:	45 9a       	sbi	0x08, 5	; 8
	
	
	num_0_on();
 1ae:	42 9a       	sbi	0x08, 2	; 8
 1b0:	08 95       	ret

000001b2 <num_5_off>:
 1b2:	43 9a       	sbi	0x08, 3	; 8
 1b4:	41 9a       	sbi	0x08, 1	; 8
 1b6:	44 9a       	sbi	0x08, 4	; 8
 1b8:	42 9a       	sbi	0x08, 2	; 8
 1ba:	40 9a       	sbi	0x08, 0	; 8
 1bc:	08 95       	ret

000001be <num_6_off>:
 1be:	43 9a       	sbi	0x08, 3	; 8
 1c0:	41 9a       	sbi	0x08, 1	; 8
 1c2:	44 9a       	sbi	0x08, 4	; 8
	_delay_ms(m);
	num_0_off();
 1c4:	42 9a       	sbi	0x08, 2	; 8
 1c6:	40 9a       	sbi	0x08, 0	; 8
 1c8:	2a 9a       	sbi	0x05, 2	; 5
	PORTC |= (1 << segment_2);
	PORTC |= (1 << segment_1);
	PORTC |= (1 << segment_4);
	PORTC |= (1 << segment_6);
	PORTC |= (1 << segment_7);
	PORTB |= (1 << segment_5);
 1ca:	08 95       	ret

000001cc <num_7_off>:
}

void num_7_off(void){
	
	PORTC |= (1 << segment_2);
 1cc:	43 9a       	sbi	0x08, 3	; 8
	PORTC |= (1 << segment_3);
 1ce:	45 9a       	sbi	0x08, 5	; 8
	PORTC |= (1 << segment_6);
 1d0:	42 9a       	sbi	0x08, 2	; 8
 1d2:	08 95       	ret

000001d4 <num_8_off>:
	
}

void num_8_off(void){
	
	PORTC |= (1 << segment_1);
 1d4:	41 9a       	sbi	0x08, 1	; 8
	PORTC |= (1 << segment_2);
 1d6:	43 9a       	sbi	0x08, 3	; 8
	PORTC |= (1 << segment_3);
 1d8:	45 9a       	sbi	0x08, 5	; 8
	PORTC |= (1 << segment_4);
 1da:	44 9a       	sbi	0x08, 4	; 8
	PORTB |= (1 << segment_5);
 1dc:	2a 9a       	sbi	0x05, 2	; 5
	PORTC |= (1 << segment_7);
 1de:	40 9a       	sbi	0x08, 0	; 8
	PORTC |= (1 << segment_6);
 1e0:	42 9a       	sbi	0x08, 2	; 8
 1e2:	08 95       	ret

000001e4 <num_9_off>:
}

void num_9_off(void){
	
	PORTC |= (1 << segment_1);
 1e4:	41 9a       	sbi	0x08, 1	; 8
	PORTC |= (1 << segment_2);
 1e6:	43 9a       	sbi	0x08, 3	; 8
	PORTC |= (1 << segment_3);
 1e8:	45 9a       	sbi	0x08, 5	; 8
	PORTC |= (1 << segment_4);
 1ea:	44 9a       	sbi	0x08, 4	; 8
	PORTC |= (1 << segment_6);
 1ec:	42 9a       	sbi	0x08, 2	; 8
 1ee:	08 95       	ret

000001f0 <num_0_off>:
}

void num_0_off(void){
	
	PORTC |= (1 << segment_1);
 1f0:	41 9a       	sbi	0x08, 1	; 8
	PORTC |= (1 << segment_2);
 1f2:	43 9a       	sbi	0x08, 3	; 8
	PORTC |= (1 << segment_3);
 1f4:	45 9a       	sbi	0x08, 5	; 8
	
	PORTB |= (1 << segment_5);
 1f6:	2a 9a       	sbi	0x05, 2	; 5
	PORTC |= (1 << segment_6);
 1f8:	42 9a       	sbi	0x08, 2	; 8
	PORTC |= (1 << segment_7);
 1fa:	40 9a       	sbi	0x08, 0	; 8
 1fc:	08 95       	ret

000001fe <logic_func>:
	
}

void logic_func( int number[][4]){
	
	if ( arb <= 3){ 
 1fe:	20 91 24 01 	lds	r18, 0x0124
 202:	30 91 25 01 	lds	r19, 0x0125
 206:	24 30       	cpi	r18, 0x04	; 4
 208:	31 05       	cpc	r19, r1
 20a:	0c f0       	brlt	.+2      	; 0x20e <logic_func+0x10>
 20c:	94 c1       	rjmp	.+808    	; 0x536 <logic_func+0x338>
		if (arb2 <= 3){  
 20e:	20 91 22 01 	lds	r18, 0x0122
 212:	30 91 23 01 	lds	r19, 0x0123
 216:	24 30       	cpi	r18, 0x04	; 4
 218:	31 05       	cpc	r19, r1
 21a:	0c f0       	brlt	.+2      	; 0x21e <logic_func+0x20>
 21c:	8c c1       	rjmp	.+792    	; 0x536 <logic_func+0x338>
			//Determining whether or not to switch on the first digit
			if (  (arb2 == 0) ){
 21e:	23 2b       	or	r18, r19
 220:	11 f4       	brne	.+4      	; 0x226 <logic_func+0x28>
				PORTD |= (1 << digit_act1); } else {PORTD &= ~ (1 << digit_act1);}
 222:	58 9a       	sbi	0x0b, 0	; 11
 224:	01 c0       	rjmp	.+2      	; 0x228 <logic_func+0x2a>
 226:	58 98       	cbi	0x0b, 0	; 11
			//Determining whether or not to switch on the first digit
			if (  (arb2 == 1) ){
 228:	20 91 22 01 	lds	r18, 0x0122
 22c:	30 91 23 01 	lds	r19, 0x0123
 230:	21 30       	cpi	r18, 0x01	; 1
 232:	31 05       	cpc	r19, r1
 234:	11 f4       	brne	.+4      	; 0x23a <logic_func+0x3c>
				PORTD |= (1 << digit_act2); } else {PORTD &= ~ (1 << digit_act2);}
 236:	59 9a       	sbi	0x0b, 1	; 11
 238:	01 c0       	rjmp	.+2      	; 0x23c <logic_func+0x3e>
 23a:	59 98       	cbi	0x0b, 1	; 11
			//Determining whether or not to switch on the first digit
			if (  (arb2 == 2) ){
 23c:	20 91 22 01 	lds	r18, 0x0122
 240:	30 91 23 01 	lds	r19, 0x0123
 244:	22 30       	cpi	r18, 0x02	; 2
 246:	31 05       	cpc	r19, r1
 248:	11 f4       	brne	.+4      	; 0x24e <logic_func+0x50>
				PORTD |= (1 << digit_act3); } else {PORTD &= ~ (1 << digit_act3);}
 24a:	5a 9a       	sbi	0x0b, 2	; 11
 24c:	01 c0       	rjmp	.+2      	; 0x250 <logic_func+0x52>
 24e:	5a 98       	cbi	0x0b, 2	; 11
			//Determining whether or not to switch on the first digit
			if (  (arb2 == 3) ){
 250:	20 91 22 01 	lds	r18, 0x0122
 254:	30 91 23 01 	lds	r19, 0x0123
 258:	23 30       	cpi	r18, 0x03	; 3
 25a:	31 05       	cpc	r19, r1
 25c:	11 f4       	brne	.+4      	; 0x262 <logic_func+0x64>
				PORTD |= (1 << digit_act4); } else {PORTD &= ~ (1 << digit_act4);}
 25e:	5b 9a       	sbi	0x0b, 3	; 11
 260:	01 c0       	rjmp	.+2      	; 0x264 <logic_func+0x66>
 262:	5b 98       	cbi	0x0b, 3	; 11
			
			switch (number[arb][arb2]){
 264:	e0 91 24 01 	lds	r30, 0x0124
 268:	f0 91 25 01 	lds	r31, 0x0125
 26c:	ee 0f       	add	r30, r30
 26e:	ff 1f       	adc	r31, r31
 270:	ee 0f       	add	r30, r30
 272:	ff 1f       	adc	r31, r31
 274:	ee 0f       	add	r30, r30
 276:	ff 1f       	adc	r31, r31
 278:	e8 0f       	add	r30, r24
 27a:	f9 1f       	adc	r31, r25
 27c:	20 91 22 01 	lds	r18, 0x0122
 280:	30 91 23 01 	lds	r19, 0x0123
 284:	22 0f       	add	r18, r18
 286:	33 1f       	adc	r19, r19
 288:	e2 0f       	add	r30, r18
 28a:	f3 1f       	adc	r31, r19
 28c:	01 90       	ld	r0, Z+
 28e:	f0 81       	ld	r31, Z
 290:	e0 2d       	mov	r30, r0
 292:	ea 30       	cpi	r30, 0x0A	; 10
 294:	f1 05       	cpc	r31, r1
 296:	08 f0       	brcs	.+2      	; 0x29a <logic_func+0x9c>
 298:	30 c1       	rjmp	.+608    	; 0x4fa <logic_func+0x2fc>
 29a:	ec 5c       	subi	r30, 0xCC	; 204
 29c:	ff 4f       	sbci	r31, 0xFF	; 255
 29e:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__tablejump2__>
				case 1: 
					num_2_off();
 2a2:	0e 94 c8 00 	call	0x190	; 0x190 <num_2_off>
					num_3_off();
 2a6:	0e 94 ce 00 	call	0x19c	; 0x19c <num_3_off>
					num_4_off();
 2aa:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <num_4_off>
					num_5_off();
 2ae:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <num_5_off>
					num_6_off();
 2b2:	0e 94 df 00 	call	0x1be	; 0x1be <num_6_off>
					num_7_off();
 2b6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <num_7_off>
					num_8_off();
 2ba:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <num_8_off>
					num_9_off();  
 2be:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <num_9_off>
					num_0_off();  
 2c2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <num_0_off>
					num_1_on();
 2c6:	0e 94 8b 00 	call	0x116	; 0x116 <num_1_on>
					arb2++;
 2ca:	80 91 22 01 	lds	r24, 0x0122
 2ce:	90 91 23 01 	lds	r25, 0x0123
 2d2:	01 96       	adiw	r24, 0x01	; 1
 2d4:	90 93 23 01 	sts	0x0123, r25
 2d8:	80 93 22 01 	sts	0x0122, r24
					break;
 2dc:	22 c1       	rjmp	.+580    	; 0x522 <logic_func+0x324>
				case 2:
					 
					num_1_off();
 2de:	0e 94 c5 00 	call	0x18a	; 0x18a <num_1_off>
					num_3_off();
 2e2:	0e 94 ce 00 	call	0x19c	; 0x19c <num_3_off>
					num_4_off();
 2e6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <num_4_off>
					num_5_off();
 2ea:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <num_5_off>
					num_6_off();
 2ee:	0e 94 df 00 	call	0x1be	; 0x1be <num_6_off>
					num_7_off();
 2f2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <num_7_off>
					num_8_off();
 2f6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <num_8_off>
					num_9_off();
 2fa:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <num_9_off>
					num_0_off(); 
 2fe:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <num_0_off>
					num_2_on();
 302:	0e 94 8e 00 	call	0x11c	; 0x11c <num_2_on>
					arb2++;
 306:	80 91 22 01 	lds	r24, 0x0122
 30a:	90 91 23 01 	lds	r25, 0x0123
 30e:	01 96       	adiw	r24, 0x01	; 1
 310:	90 93 23 01 	sts	0x0123, r25
 314:	80 93 22 01 	sts	0x0122, r24
					break; 
 318:	04 c1       	rjmp	.+520    	; 0x522 <logic_func+0x324>
				case 3:
					 
					num_2_off();
 31a:	0e 94 c8 00 	call	0x190	; 0x190 <num_2_off>
					num_1_off();
 31e:	0e 94 c5 00 	call	0x18a	; 0x18a <num_1_off>
					num_4_off();
 322:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <num_4_off>
					num_5_off();
 326:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <num_5_off>
					num_6_off();
 32a:	0e 94 df 00 	call	0x1be	; 0x1be <num_6_off>
					num_7_off();
 32e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <num_7_off>
					num_8_off();
 332:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <num_8_off>
					num_9_off();
 336:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <num_9_off>
					num_0_off(); 
 33a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <num_0_off>
					num_3_on();
 33e:	0e 94 94 00 	call	0x128	; 0x128 <num_3_on>
					arb2++;
 342:	80 91 22 01 	lds	r24, 0x0122
 346:	90 91 23 01 	lds	r25, 0x0123
 34a:	01 96       	adiw	r24, 0x01	; 1
 34c:	90 93 23 01 	sts	0x0123, r25
 350:	80 93 22 01 	sts	0x0122, r24
					break;
 354:	e6 c0       	rjmp	.+460    	; 0x522 <logic_func+0x324>
				case 4:
					
					num_2_off();
 356:	0e 94 c8 00 	call	0x190	; 0x190 <num_2_off>
					num_3_off();
 35a:	0e 94 ce 00 	call	0x19c	; 0x19c <num_3_off>
					num_1_off();
 35e:	0e 94 c5 00 	call	0x18a	; 0x18a <num_1_off>
					num_5_off();
 362:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <num_5_off>
					num_6_off();
 366:	0e 94 df 00 	call	0x1be	; 0x1be <num_6_off>
					num_7_off();
 36a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <num_7_off>
					num_8_off();
 36e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <num_8_off>
					num_9_off();
 372:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <num_9_off>
					num_0_off(); 
 376:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <num_0_off>
					num_4_on(); 
 37a:	0e 94 9a 00 	call	0x134	; 0x134 <num_4_on>
					arb2++;
 37e:	80 91 22 01 	lds	r24, 0x0122
 382:	90 91 23 01 	lds	r25, 0x0123
 386:	01 96       	adiw	r24, 0x01	; 1
 388:	90 93 23 01 	sts	0x0123, r25
 38c:	80 93 22 01 	sts	0x0122, r24
					break; 
 390:	c8 c0       	rjmp	.+400    	; 0x522 <logic_func+0x324>
				case 5:
					 
					num_2_off();
 392:	0e 94 c8 00 	call	0x190	; 0x190 <num_2_off>
					num_3_off();
 396:	0e 94 ce 00 	call	0x19c	; 0x19c <num_3_off>
					num_4_off();
 39a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <num_4_off>
					num_1_off();
 39e:	0e 94 c5 00 	call	0x18a	; 0x18a <num_1_off>
					num_6_off();
 3a2:	0e 94 df 00 	call	0x1be	; 0x1be <num_6_off>
					num_7_off();
 3a6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <num_7_off>
					num_8_off();
 3aa:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <num_8_off>
					num_9_off();
 3ae:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <num_9_off>
					num_0_off(); 
 3b2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <num_0_off>
					num_5_on();
 3b6:	0e 94 9f 00 	call	0x13e	; 0x13e <num_5_on>
					arb2++;
 3ba:	80 91 22 01 	lds	r24, 0x0122
 3be:	90 91 23 01 	lds	r25, 0x0123
 3c2:	01 96       	adiw	r24, 0x01	; 1
 3c4:	90 93 23 01 	sts	0x0123, r25
 3c8:	80 93 22 01 	sts	0x0122, r24
					break;
 3cc:	aa c0       	rjmp	.+340    	; 0x522 <logic_func+0x324>
				case 6:
					 
					num_2_off();
 3ce:	0e 94 c8 00 	call	0x190	; 0x190 <num_2_off>
					num_3_off();
 3d2:	0e 94 ce 00 	call	0x19c	; 0x19c <num_3_off>
					num_4_off();
 3d6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <num_4_off>
					num_5_off();
 3da:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <num_5_off>
					num_1_off();
 3de:	0e 94 c5 00 	call	0x18a	; 0x18a <num_1_off>
					num_7_off();
 3e2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <num_7_off>
					num_8_off();
 3e6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <num_8_off>
					num_9_off();
 3ea:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <num_9_off>
					num_0_off(); 
 3ee:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <num_0_off>
					num_6_on();
 3f2:	0e 94 a5 00 	call	0x14a	; 0x14a <num_6_on>
					arb2++;
 3f6:	80 91 22 01 	lds	r24, 0x0122
 3fa:	90 91 23 01 	lds	r25, 0x0123
 3fe:	01 96       	adiw	r24, 0x01	; 1
 400:	90 93 23 01 	sts	0x0123, r25
 404:	80 93 22 01 	sts	0x0122, r24
					break;
 408:	8c c0       	rjmp	.+280    	; 0x522 <logic_func+0x324>
				case 7:
					
					num_2_off();
 40a:	0e 94 c8 00 	call	0x190	; 0x190 <num_2_off>
					num_3_off();
 40e:	0e 94 ce 00 	call	0x19c	; 0x19c <num_3_off>
					num_4_off();
 412:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <num_4_off>
					num_5_off();
 416:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <num_5_off>
					num_6_off();
 41a:	0e 94 df 00 	call	0x1be	; 0x1be <num_6_off>
					num_1_off();
 41e:	0e 94 c5 00 	call	0x18a	; 0x18a <num_1_off>
					num_8_off();
 422:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <num_8_off>
					num_9_off();
 426:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <num_9_off>
					num_0_off(); 
 42a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <num_0_off>
					num_7_on(); 
 42e:	0e 94 ac 00 	call	0x158	; 0x158 <num_7_on>
					arb2++;
 432:	80 91 22 01 	lds	r24, 0x0122
 436:	90 91 23 01 	lds	r25, 0x0123
 43a:	01 96       	adiw	r24, 0x01	; 1
 43c:	90 93 23 01 	sts	0x0123, r25
 440:	80 93 22 01 	sts	0x0122, r24
					break;
 444:	6e c0       	rjmp	.+220    	; 0x522 <logic_func+0x324>
				case 8:
					 
					num_2_off();
 446:	0e 94 c8 00 	call	0x190	; 0x190 <num_2_off>
					num_3_off();
 44a:	0e 94 ce 00 	call	0x19c	; 0x19c <num_3_off>
					num_4_off();
 44e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <num_4_off>
					num_5_off();
 452:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <num_5_off>
					num_6_off();
 456:	0e 94 df 00 	call	0x1be	; 0x1be <num_6_off>
					num_7_off();
 45a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <num_7_off>
					num_1_off();
 45e:	0e 94 c5 00 	call	0x18a	; 0x18a <num_1_off>
					num_9_off();
 462:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <num_9_off>
					num_0_off(); 
 466:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <num_0_off>
					num_8_on();
 46a:	0e 94 b0 00 	call	0x160	; 0x160 <num_8_on>
					arb2++;
 46e:	80 91 22 01 	lds	r24, 0x0122
 472:	90 91 23 01 	lds	r25, 0x0123
 476:	01 96       	adiw	r24, 0x01	; 1
 478:	90 93 23 01 	sts	0x0123, r25
 47c:	80 93 22 01 	sts	0x0122, r24
					break; 
 480:	50 c0       	rjmp	.+160    	; 0x522 <logic_func+0x324>
				case 9:
					
					num_2_off();
 482:	0e 94 c8 00 	call	0x190	; 0x190 <num_2_off>
					num_3_off();
 486:	0e 94 ce 00 	call	0x19c	; 0x19c <num_3_off>
					num_4_off();
 48a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <num_4_off>
					num_5_off();
 48e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <num_5_off>
					num_6_off();
 492:	0e 94 df 00 	call	0x1be	; 0x1be <num_6_off>
					num_7_off();
 496:	0e 94 e6 00 	call	0x1cc	; 0x1cc <num_7_off>
					num_8_off();
 49a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <num_8_off>
					num_1_off();
 49e:	0e 94 c5 00 	call	0x18a	; 0x18a <num_1_off>
					num_0_off(); 
 4a2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <num_0_off>
					num_9_on(); 
 4a6:	0e 94 b8 00 	call	0x170	; 0x170 <num_9_on>
					arb2++;
 4aa:	80 91 22 01 	lds	r24, 0x0122
 4ae:	90 91 23 01 	lds	r25, 0x0123
 4b2:	01 96       	adiw	r24, 0x01	; 1
 4b4:	90 93 23 01 	sts	0x0123, r25
 4b8:	80 93 22 01 	sts	0x0122, r24
					break;
 4bc:	32 c0       	rjmp	.+100    	; 0x522 <logic_func+0x324>
				case 0:
					 
					num_2_off();
 4be:	0e 94 c8 00 	call	0x190	; 0x190 <num_2_off>
					num_3_off();
 4c2:	0e 94 ce 00 	call	0x19c	; 0x19c <num_3_off>
					num_4_off();
 4c6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <num_4_off>
					num_5_off();
 4ca:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <num_5_off>
					num_6_off();
 4ce:	0e 94 df 00 	call	0x1be	; 0x1be <num_6_off>
					num_7_off();
 4d2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <num_7_off>
					num_8_off();
 4d6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <num_8_off>
					num_9_off();
 4da:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <num_9_off>
					num_1_off(); 
 4de:	0e 94 c5 00 	call	0x18a	; 0x18a <num_1_off>
					num_0_on();
 4e2:	0e 94 be 00 	call	0x17c	; 0x17c <num_0_on>
					arb2++;
 4e6:	80 91 22 01 	lds	r24, 0x0122
 4ea:	90 91 23 01 	lds	r25, 0x0123
 4ee:	01 96       	adiw	r24, 0x01	; 1
 4f0:	90 93 23 01 	sts	0x0123, r25
 4f4:	80 93 22 01 	sts	0x0122, r24
					break;
 4f8:	14 c0       	rjmp	.+40     	; 0x522 <logic_func+0x324>
				default:  
					num_0_off(); 
 4fa:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <num_0_off>
					num_1_off(); 
 4fe:	0e 94 c5 00 	call	0x18a	; 0x18a <num_1_off>
					num_2_off();
 502:	0e 94 c8 00 	call	0x190	; 0x190 <num_2_off>
					num_3_off();
 506:	0e 94 ce 00 	call	0x19c	; 0x19c <num_3_off>
					num_4_off();
 50a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <num_4_off>
					num_5_off();
 50e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <num_5_off>
					num_6_off();
 512:	0e 94 df 00 	call	0x1be	; 0x1be <num_6_off>
					num_7_off();
 516:	0e 94 e6 00 	call	0x1cc	; 0x1cc <num_7_off>
					num_8_off();
 51a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <num_8_off>
					num_9_off(); 
 51e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <num_9_off>
					break;
			} 
			if (arb2 > 3){
 522:	80 91 22 01 	lds	r24, 0x0122
 526:	90 91 23 01 	lds	r25, 0x0123
 52a:	04 97       	sbiw	r24, 0x04	; 4
 52c:	24 f0       	brlt	.+8      	; 0x536 <logic_func+0x338>
				arb2 = 0;
 52e:	10 92 23 01 	sts	0x0123, r1
 532:	10 92 22 01 	sts	0x0122, r1
 536:	08 95       	ret

00000538 <__vector_11>:
}




ISR (TIMER1_COMPA_vect){ 
 538:	1f 92       	push	r1
 53a:	0f 92       	push	r0
 53c:	0f b6       	in	r0, 0x3f	; 63
 53e:	0f 92       	push	r0
 540:	11 24       	eor	r1, r1
 542:	2f 93       	push	r18
 544:	3f 93       	push	r19
 546:	4f 93       	push	r20
 548:	5f 93       	push	r21
 54a:	6f 93       	push	r22
 54c:	7f 93       	push	r23
 54e:	8f 93       	push	r24
 550:	9f 93       	push	r25
 552:	af 93       	push	r26
 554:	bf 93       	push	r27
 556:	ef 93       	push	r30
 558:	ff 93       	push	r31

	logic_func(num);
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	91 e0       	ldi	r25, 0x01	; 1
 55e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <logic_func>
		PORTD ^= (1 << digit_act2);
		PORTD ^= (1 << digit_act3);
		PORTD ^= (1 << digit_act4);
	num_1_tog(); 
	*/  
	time_counter ++; 
 562:	80 91 20 01 	lds	r24, 0x0120
 566:	90 91 21 01 	lds	r25, 0x0121
 56a:	01 96       	adiw	r24, 0x01	; 1
 56c:	90 93 21 01 	sts	0x0121, r25
 570:	80 93 20 01 	sts	0x0120, r24

	if (time_counter >= 1000){ 
 574:	88 3e       	cpi	r24, 0xE8	; 232
 576:	93 40       	sbci	r25, 0x03	; 3
 578:	9c f0       	brlt	.+38     	; 0x5a0 <__vector_11+0x68>
		arb++; 
 57a:	80 91 24 01 	lds	r24, 0x0124
 57e:	90 91 25 01 	lds	r25, 0x0125
 582:	01 96       	adiw	r24, 0x01	; 1
 584:	90 93 25 01 	sts	0x0125, r25
 588:	80 93 24 01 	sts	0x0124, r24
		time_counter = 0;
 58c:	10 92 21 01 	sts	0x0121, r1
 590:	10 92 20 01 	sts	0x0120, r1
		if (arb > 3){ arb = 0; }
 594:	04 97       	sbiw	r24, 0x04	; 4
 596:	24 f0       	brlt	.+8      	; 0x5a0 <__vector_11+0x68>
 598:	10 92 25 01 	sts	0x0125, r1
 59c:	10 92 24 01 	sts	0x0124, r1
	}
	
}
 5a0:	ff 91       	pop	r31
 5a2:	ef 91       	pop	r30
 5a4:	bf 91       	pop	r27
 5a6:	af 91       	pop	r26
 5a8:	9f 91       	pop	r25
 5aa:	8f 91       	pop	r24
 5ac:	7f 91       	pop	r23
 5ae:	6f 91       	pop	r22
 5b0:	5f 91       	pop	r21
 5b2:	4f 91       	pop	r20
 5b4:	3f 91       	pop	r19
 5b6:	2f 91       	pop	r18
 5b8:	0f 90       	pop	r0
 5ba:	0f be       	out	0x3f, r0	; 63
 5bc:	0f 90       	pop	r0
 5be:	1f 90       	pop	r1
 5c0:	18 95       	reti

000005c2 <__tablejump2__>:
 5c2:	ee 0f       	add	r30, r30
 5c4:	ff 1f       	adc	r31, r31
 5c6:	05 90       	lpm	r0, Z+
 5c8:	f4 91       	lpm	r31, Z
 5ca:	e0 2d       	mov	r30, r0
 5cc:	09 94       	ijmp

000005ce <_exit>:
 5ce:	f8 94       	cli

000005d0 <__stop_program>:
 5d0:	ff cf       	rjmp	.-2      	; 0x5d0 <__stop_program>
