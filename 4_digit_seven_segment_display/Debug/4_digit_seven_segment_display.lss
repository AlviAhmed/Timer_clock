
4_digit_seven_segment_display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000696  0000072a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000696  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080010a  0080010a  00000734  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000764  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000117b  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001d2  00000000  00000000  00001a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ac  00000000  00000000  00001c19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  000021c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036b  00000000  00000000  00002444  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000021d  00000000  00000000  000027af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  000029cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 a9 02 	jmp	0x552	; 0x552 <__vector_11>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	67 02       	muls	r22, r23
  6a:	59 01       	movw	r10, r18
  6c:	77 01       	movw	r14, r14
  6e:	95 01       	movw	r18, r10
  70:	b3 01       	movw	r22, r6
  72:	d1 01       	movw	r26, r2
  74:	ef 01       	movw	r28, r30
  76:	0d 02       	muls	r16, r29
  78:	2b 02       	muls	r18, r27
  7a:	49 02       	muls	r20, r25

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e6 e9       	ldi	r30, 0x96	; 150
  90:	f6 e0       	ldi	r31, 0x06	; 6
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	aa 30       	cpi	r26, 0x0A	; 10
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	aa e0       	ldi	r26, 0x0A	; 10
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a4 31       	cpi	r26, 0x14	; 20
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 5d 00 	call	0xba	; 0xba <main>
  b2:	0c 94 49 03 	jmp	0x692	; 0x692 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	50 9a       	sbi	0x0a, 0	; 10
  bc:	51 9a       	sbi	0x0a, 1	; 10
  be:	52 9a       	sbi	0x0a, 2	; 10
  c0:	53 9a       	sbi	0x0a, 3	; 10
  c2:	55 9a       	sbi	0x0a, 5	; 10
	PORTC |= (1 << segment_6);
	_delay_ms(n);
	
	/////////////////////
	
	num_1_on();
  c4:	56 9a       	sbi	0x0a, 6	; 10
  c6:	57 9a       	sbi	0x0a, 7	; 10
  c8:	3d 9a       	sbi	0x07, 5	; 7
  ca:	3c 9a       	sbi	0x07, 4	; 7
  cc:	3a 9a       	sbi	0x07, 2	; 7
  ce:	3b 9a       	sbi	0x07, 3	; 7
  d0:	39 9a       	sbi	0x07, 1	; 7
  d2:	22 9a       	sbi	0x04, 2	; 4
  d4:	38 9a       	sbi	0x07, 0	; 7
  d6:	40 9a       	sbi	0x08, 0	; 8
  d8:	42 9a       	sbi	0x08, 2	; 8
	_delay_ms(m);
	num_1_off();
  da:	2a 9a       	sbi	0x05, 2	; 5
  dc:	44 9a       	sbi	0x08, 4	; 8
	
	num_2_on();
  de:	45 9a       	sbi	0x08, 5	; 8
  e0:	43 9a       	sbi	0x08, 3	; 8
  e2:	41 9a       	sbi	0x08, 1	; 8
  e4:	58 98       	cbi	0x0b, 0	; 11
  e6:	59 98       	cbi	0x0b, 1	; 11
  e8:	5a 98       	cbi	0x0b, 2	; 11
  ea:	5b 98       	cbi	0x0b, 3	; 11
  ec:	e1 e8       	ldi	r30, 0x81	; 129
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 60       	ori	r24, 0x08	; 8
	_delay_ms(m);
	num_2_off();
  f4:	80 83       	st	Z, r24
  f6:	af e6       	ldi	r26, 0x6F	; 111
	
	
	num_3_on();
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	8c 91       	ld	r24, X
  fc:	82 60       	ori	r24, 0x02	; 2
  fe:	8c 93       	st	X, r24
 100:	78 94       	sei
 102:	80 e2       	ldi	r24, 0x20	; 32
 104:	93 e0       	ldi	r25, 0x03	; 3
 106:	90 93 89 00 	sts	0x0089, r25
 10a:	80 93 88 00 	sts	0x0088, r24
	_delay_ms(m);
	num_3_off();
 10e:	80 81       	ld	r24, Z
 110:	82 60       	ori	r24, 0x02	; 2
	
	
	num_4_on();
 112:	80 83       	st	Z, r24
 114:	ff cf       	rjmp	.-2      	; 0x114 <main+0x5a>

00000116 <num_1_on>:
 116:	45 98       	cbi	0x08, 5	; 8
 118:	42 98       	cbi	0x08, 2	; 8
 11a:	08 95       	ret

0000011c <num_2_on>:
 11c:	43 98       	cbi	0x08, 3	; 8
 11e:	45 98       	cbi	0x08, 5	; 8
 120:	44 98       	cbi	0x08, 4	; 8
 122:	2a 98       	cbi	0x05, 2	; 5
 124:	40 98       	cbi	0x08, 0	; 8
 126:	08 95       	ret

00000128 <num_3_on>:
	_delay_ms(m);
	num_4_off();
 128:	43 98       	cbi	0x08, 3	; 8
 12a:	45 98       	cbi	0x08, 5	; 8
	

	num_5_on();
 12c:	44 98       	cbi	0x08, 4	; 8
 12e:	42 98       	cbi	0x08, 2	; 8
 130:	40 98       	cbi	0x08, 0	; 8
 132:	08 95       	ret

00000134 <num_4_on>:
 134:	41 98       	cbi	0x08, 1	; 8
 136:	44 98       	cbi	0x08, 4	; 8
 138:	45 98       	cbi	0x08, 5	; 8
 13a:	42 98       	cbi	0x08, 2	; 8
 13c:	08 95       	ret

0000013e <num_5_on>:
 13e:	43 98       	cbi	0x08, 3	; 8
 140:	41 98       	cbi	0x08, 1	; 8
	_delay_ms(m);
	num_5_off();
 142:	44 98       	cbi	0x08, 4	; 8
 144:	42 98       	cbi	0x08, 2	; 8
	
	
	num_6_on();
 146:	40 98       	cbi	0x08, 0	; 8
 148:	08 95       	ret

0000014a <num_6_on>:
 14a:	43 98       	cbi	0x08, 3	; 8
 14c:	41 98       	cbi	0x08, 1	; 8
 14e:	44 98       	cbi	0x08, 4	; 8
 150:	42 98       	cbi	0x08, 2	; 8
 152:	40 98       	cbi	0x08, 0	; 8
 154:	2a 98       	cbi	0x05, 2	; 5
 156:	08 95       	ret

00000158 <num_7_on>:
 158:	43 98       	cbi	0x08, 3	; 8
 15a:	45 98       	cbi	0x08, 5	; 8
	_delay_ms(m);
	num_6_off();
 15c:	42 98       	cbi	0x08, 2	; 8
 15e:	08 95       	ret

00000160 <num_8_on>:

	
	num_7_on();
 160:	41 98       	cbi	0x08, 1	; 8
 162:	43 98       	cbi	0x08, 3	; 8
 164:	45 98       	cbi	0x08, 5	; 8
 166:	44 98       	cbi	0x08, 4	; 8
 168:	2a 98       	cbi	0x05, 2	; 5
 16a:	40 98       	cbi	0x08, 0	; 8
 16c:	42 98       	cbi	0x08, 2	; 8
 16e:	08 95       	ret

00000170 <num_9_on>:
 170:	41 98       	cbi	0x08, 1	; 8
 172:	43 98       	cbi	0x08, 3	; 8
 174:	45 98       	cbi	0x08, 5	; 8
	_delay_ms(m);
	num_7_off();
 176:	44 98       	cbi	0x08, 4	; 8
 178:	42 98       	cbi	0x08, 2	; 8
	
	
	num_8_on();
 17a:	08 95       	ret

0000017c <num_0_on>:
 17c:	41 98       	cbi	0x08, 1	; 8
 17e:	43 98       	cbi	0x08, 3	; 8
 180:	45 98       	cbi	0x08, 5	; 8
 182:	2a 98       	cbi	0x05, 2	; 5
 184:	42 98       	cbi	0x08, 2	; 8
 186:	40 98       	cbi	0x08, 0	; 8
 188:	08 95       	ret

0000018a <num_1_off>:
 18a:	45 9a       	sbi	0x08, 5	; 8
 18c:	42 9a       	sbi	0x08, 2	; 8
 18e:	08 95       	ret

00000190 <num_2_off>:
	_delay_ms(m);
	num_8_off();
 190:	43 9a       	sbi	0x08, 3	; 8
 192:	45 9a       	sbi	0x08, 5	; 8

	
	num_9_on();
 194:	44 9a       	sbi	0x08, 4	; 8
 196:	2a 9a       	sbi	0x05, 2	; 5
 198:	40 9a       	sbi	0x08, 0	; 8
 19a:	08 95       	ret

0000019c <num_3_off>:
 19c:	43 9a       	sbi	0x08, 3	; 8
 19e:	45 9a       	sbi	0x08, 5	; 8
 1a0:	44 9a       	sbi	0x08, 4	; 8
 1a2:	42 9a       	sbi	0x08, 2	; 8
 1a4:	40 9a       	sbi	0x08, 0	; 8
 1a6:	08 95       	ret

000001a8 <num_4_off>:
 1a8:	41 9a       	sbi	0x08, 1	; 8
	_delay_ms(m);
	num_9_off();
 1aa:	44 9a       	sbi	0x08, 4	; 8
 1ac:	45 9a       	sbi	0x08, 5	; 8
	
	
	num_0_on();
 1ae:	42 9a       	sbi	0x08, 2	; 8
 1b0:	08 95       	ret

000001b2 <num_5_off>:
 1b2:	43 9a       	sbi	0x08, 3	; 8
 1b4:	41 9a       	sbi	0x08, 1	; 8
 1b6:	44 9a       	sbi	0x08, 4	; 8
 1b8:	42 9a       	sbi	0x08, 2	; 8
 1ba:	40 9a       	sbi	0x08, 0	; 8
 1bc:	08 95       	ret

000001be <num_6_off>:
 1be:	43 9a       	sbi	0x08, 3	; 8
 1c0:	41 9a       	sbi	0x08, 1	; 8
 1c2:	44 9a       	sbi	0x08, 4	; 8
	_delay_ms(m);
	num_0_off();
 1c4:	42 9a       	sbi	0x08, 2	; 8
 1c6:	40 9a       	sbi	0x08, 0	; 8
 1c8:	2a 9a       	sbi	0x05, 2	; 5
	PORTC |= (1 << segment_2);
	PORTC |= (1 << segment_1);
	PORTC |= (1 << segment_4);
	PORTC |= (1 << segment_6);
	PORTC |= (1 << segment_7);
	PORTB |= (1 << segment_5);
 1ca:	08 95       	ret

000001cc <num_7_off>:
}

void num_7_off(void){
	
	PORTC |= (1 << segment_2);
 1cc:	43 9a       	sbi	0x08, 3	; 8
	PORTC |= (1 << segment_3);
 1ce:	45 9a       	sbi	0x08, 5	; 8
	PORTC |= (1 << segment_6);
 1d0:	42 9a       	sbi	0x08, 2	; 8
 1d2:	08 95       	ret

000001d4 <num_8_off>:
	
}

void num_8_off(void){
	
	PORTC |= (1 << segment_1);
 1d4:	41 9a       	sbi	0x08, 1	; 8
	PORTC |= (1 << segment_2);
 1d6:	43 9a       	sbi	0x08, 3	; 8
	PORTC |= (1 << segment_3);
 1d8:	45 9a       	sbi	0x08, 5	; 8
	PORTC |= (1 << segment_4);
 1da:	44 9a       	sbi	0x08, 4	; 8
	PORTB |= (1 << segment_5);
 1dc:	2a 9a       	sbi	0x05, 2	; 5
	PORTC |= (1 << segment_7);
 1de:	40 9a       	sbi	0x08, 0	; 8
	PORTC |= (1 << segment_6);
 1e0:	42 9a       	sbi	0x08, 2	; 8
 1e2:	08 95       	ret

000001e4 <num_9_off>:
}

void num_9_off(void){
	
	PORTC |= (1 << segment_1);
 1e4:	41 9a       	sbi	0x08, 1	; 8
	PORTC |= (1 << segment_2);
 1e6:	43 9a       	sbi	0x08, 3	; 8
	PORTC |= (1 << segment_3);
 1e8:	45 9a       	sbi	0x08, 5	; 8
	PORTC |= (1 << segment_4);
 1ea:	44 9a       	sbi	0x08, 4	; 8
	PORTC |= (1 << segment_6);
 1ec:	42 9a       	sbi	0x08, 2	; 8
 1ee:	08 95       	ret

000001f0 <num_0_off>:
}

void num_0_off(void){
	
	PORTC |= (1 << segment_1);
 1f0:	41 9a       	sbi	0x08, 1	; 8
	PORTC |= (1 << segment_2);
 1f2:	43 9a       	sbi	0x08, 3	; 8
	PORTC |= (1 << segment_3);
 1f4:	45 9a       	sbi	0x08, 5	; 8
	
	PORTB |= (1 << segment_5);
 1f6:	2a 9a       	sbi	0x05, 2	; 5
	PORTC |= (1 << segment_6);
 1f8:	42 9a       	sbi	0x08, 2	; 8
	PORTC |= (1 << segment_7);
 1fa:	40 9a       	sbi	0x08, 0	; 8
 1fc:	08 95       	ret

000001fe <multiplex_func>:
} 


void multiplex_func( int number[][4]){
	
	if ( arb <= entries_row){ 
 1fe:	40 91 10 01 	lds	r20, 0x0110
 202:	50 91 11 01 	lds	r21, 0x0111
 206:	20 91 12 01 	lds	r18, 0x0112
 20a:	30 91 13 01 	lds	r19, 0x0113
 20e:	24 17       	cp	r18, r20
 210:	35 07       	cpc	r19, r21
 212:	0c f4       	brge	.+2      	; 0x216 <multiplex_func+0x18>
 214:	9d c1       	rjmp	.+826    	; 0x550 <multiplex_func+0x352>
		if (arb2 <= entries_col){  
 216:	20 91 0e 01 	lds	r18, 0x010E
 21a:	30 91 0f 01 	lds	r19, 0x010F
 21e:	40 91 00 01 	lds	r20, 0x0100
 222:	50 91 01 01 	lds	r21, 0x0101
 226:	42 17       	cp	r20, r18
 228:	53 07       	cpc	r21, r19
 22a:	0c f4       	brge	.+2      	; 0x22e <multiplex_func+0x30>
 22c:	91 c1       	rjmp	.+802    	; 0x550 <multiplex_func+0x352>
			//Determining whether or not to switch on the first digit
			if (  (arb2 == 0) ){
 22e:	23 2b       	or	r18, r19
 230:	11 f4       	brne	.+4      	; 0x236 <multiplex_func+0x38>
				PORTD |= (1 << digit_act1); } else {PORTD &= ~ (1 << digit_act1);}
 232:	58 9a       	sbi	0x0b, 0	; 11
 234:	01 c0       	rjmp	.+2      	; 0x238 <multiplex_func+0x3a>
 236:	58 98       	cbi	0x0b, 0	; 11
			//Determining whether or not to switch on the first digit
			if (  (arb2 == 1) ){
 238:	20 91 0e 01 	lds	r18, 0x010E
 23c:	30 91 0f 01 	lds	r19, 0x010F
 240:	21 30       	cpi	r18, 0x01	; 1
 242:	31 05       	cpc	r19, r1
 244:	11 f4       	brne	.+4      	; 0x24a <multiplex_func+0x4c>
				PORTD |= (1 << digit_act2); } else {PORTD &= ~ (1 << digit_act2);}
 246:	59 9a       	sbi	0x0b, 1	; 11
 248:	01 c0       	rjmp	.+2      	; 0x24c <multiplex_func+0x4e>
 24a:	59 98       	cbi	0x0b, 1	; 11
			//Determining whether or not to switch on the first digit
			if (  (arb2 == 2) ){
 24c:	20 91 0e 01 	lds	r18, 0x010E
 250:	30 91 0f 01 	lds	r19, 0x010F
 254:	22 30       	cpi	r18, 0x02	; 2
 256:	31 05       	cpc	r19, r1
 258:	11 f4       	brne	.+4      	; 0x25e <multiplex_func+0x60>
				PORTD |= (1 << digit_act3); } else {PORTD &= ~ (1 << digit_act3);}
 25a:	5a 9a       	sbi	0x0b, 2	; 11
 25c:	01 c0       	rjmp	.+2      	; 0x260 <multiplex_func+0x62>
 25e:	5a 98       	cbi	0x0b, 2	; 11
			//Determining whether or not to switch on the first digit
			if (  (arb2 == 3) ){
 260:	20 91 0e 01 	lds	r18, 0x010E
 264:	30 91 0f 01 	lds	r19, 0x010F
 268:	23 30       	cpi	r18, 0x03	; 3
 26a:	31 05       	cpc	r19, r1
 26c:	11 f4       	brne	.+4      	; 0x272 <multiplex_func+0x74>
				PORTD |= (1 << digit_act4); } else {PORTD &= ~ (1 << digit_act4);}
 26e:	5b 9a       	sbi	0x0b, 3	; 11
 270:	01 c0       	rjmp	.+2      	; 0x274 <multiplex_func+0x76>
 272:	5b 98       	cbi	0x0b, 3	; 11
			
			switch (number[arb][arb2]){
 274:	e0 91 10 01 	lds	r30, 0x0110
 278:	f0 91 11 01 	lds	r31, 0x0111
 27c:	ee 0f       	add	r30, r30
 27e:	ff 1f       	adc	r31, r31
 280:	ee 0f       	add	r30, r30
 282:	ff 1f       	adc	r31, r31
 284:	ee 0f       	add	r30, r30
 286:	ff 1f       	adc	r31, r31
 288:	e8 0f       	add	r30, r24
 28a:	f9 1f       	adc	r31, r25
 28c:	20 91 0e 01 	lds	r18, 0x010E
 290:	30 91 0f 01 	lds	r19, 0x010F
 294:	22 0f       	add	r18, r18
 296:	33 1f       	adc	r19, r19
 298:	e2 0f       	add	r30, r18
 29a:	f3 1f       	adc	r31, r19
 29c:	01 90       	ld	r0, Z+
 29e:	f0 81       	ld	r31, Z
 2a0:	e0 2d       	mov	r30, r0
 2a2:	ea 30       	cpi	r30, 0x0A	; 10
 2a4:	f1 05       	cpc	r31, r1
 2a6:	08 f0       	brcs	.+2      	; 0x2aa <multiplex_func+0xac>
 2a8:	30 c1       	rjmp	.+608    	; 0x50a <multiplex_func+0x30c>
 2aa:	ec 5c       	subi	r30, 0xCC	; 204
 2ac:	ff 4f       	sbci	r31, 0xFF	; 255
 2ae:	0c 94 43 03 	jmp	0x686	; 0x686 <__tablejump2__>
				case 1: 
					num_2_off();
 2b2:	0e 94 c8 00 	call	0x190	; 0x190 <num_2_off>
					num_3_off();
 2b6:	0e 94 ce 00 	call	0x19c	; 0x19c <num_3_off>
					num_4_off();
 2ba:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <num_4_off>
					num_5_off();
 2be:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <num_5_off>
					num_6_off();
 2c2:	0e 94 df 00 	call	0x1be	; 0x1be <num_6_off>
					num_7_off();
 2c6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <num_7_off>
					num_8_off();
 2ca:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <num_8_off>
					num_9_off();
 2ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <num_9_off>
					num_0_off();	
 2d2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <num_0_off>
					num_1_on();
 2d6:	0e 94 8b 00 	call	0x116	; 0x116 <num_1_on>
					arb2++;
 2da:	80 91 0e 01 	lds	r24, 0x010E
 2de:	90 91 0f 01 	lds	r25, 0x010F
 2e2:	01 96       	adiw	r24, 0x01	; 1
 2e4:	90 93 0f 01 	sts	0x010F, r25
 2e8:	80 93 0e 01 	sts	0x010E, r24
					break;
 2ec:	22 c1       	rjmp	.+580    	; 0x532 <multiplex_func+0x334>
				case 2:
					 
					num_1_off();
 2ee:	0e 94 c5 00 	call	0x18a	; 0x18a <num_1_off>
					num_3_off();
 2f2:	0e 94 ce 00 	call	0x19c	; 0x19c <num_3_off>
					num_4_off();
 2f6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <num_4_off>
					num_5_off();
 2fa:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <num_5_off>
					num_6_off();
 2fe:	0e 94 df 00 	call	0x1be	; 0x1be <num_6_off>
					num_7_off();
 302:	0e 94 e6 00 	call	0x1cc	; 0x1cc <num_7_off>
					num_8_off();
 306:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <num_8_off>
					num_9_off();
 30a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <num_9_off>
					num_0_off(); 
 30e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <num_0_off>
					num_2_on();
 312:	0e 94 8e 00 	call	0x11c	; 0x11c <num_2_on>
					arb2++;
 316:	80 91 0e 01 	lds	r24, 0x010E
 31a:	90 91 0f 01 	lds	r25, 0x010F
 31e:	01 96       	adiw	r24, 0x01	; 1
 320:	90 93 0f 01 	sts	0x010F, r25
 324:	80 93 0e 01 	sts	0x010E, r24
					break; 
 328:	04 c1       	rjmp	.+520    	; 0x532 <multiplex_func+0x334>
				case 3:
					 
					num_2_off();
 32a:	0e 94 c8 00 	call	0x190	; 0x190 <num_2_off>
					num_1_off();
 32e:	0e 94 c5 00 	call	0x18a	; 0x18a <num_1_off>
					num_4_off();
 332:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <num_4_off>
					num_5_off();
 336:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <num_5_off>
					num_6_off();
 33a:	0e 94 df 00 	call	0x1be	; 0x1be <num_6_off>
					num_7_off();
 33e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <num_7_off>
					num_8_off();
 342:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <num_8_off>
					num_9_off();
 346:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <num_9_off>
					num_0_off(); 
 34a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <num_0_off>
					num_3_on();
 34e:	0e 94 94 00 	call	0x128	; 0x128 <num_3_on>
					arb2++;
 352:	80 91 0e 01 	lds	r24, 0x010E
 356:	90 91 0f 01 	lds	r25, 0x010F
 35a:	01 96       	adiw	r24, 0x01	; 1
 35c:	90 93 0f 01 	sts	0x010F, r25
 360:	80 93 0e 01 	sts	0x010E, r24
					break;
 364:	e6 c0       	rjmp	.+460    	; 0x532 <multiplex_func+0x334>
				case 4:
					
					num_2_off();
 366:	0e 94 c8 00 	call	0x190	; 0x190 <num_2_off>
					num_3_off();
 36a:	0e 94 ce 00 	call	0x19c	; 0x19c <num_3_off>
					num_1_off();
 36e:	0e 94 c5 00 	call	0x18a	; 0x18a <num_1_off>
					num_5_off();
 372:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <num_5_off>
					num_6_off();
 376:	0e 94 df 00 	call	0x1be	; 0x1be <num_6_off>
					num_7_off();
 37a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <num_7_off>
					num_8_off();
 37e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <num_8_off>
					num_9_off();
 382:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <num_9_off>
					num_0_off(); 
 386:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <num_0_off>
					num_4_on(); 
 38a:	0e 94 9a 00 	call	0x134	; 0x134 <num_4_on>
					arb2++;
 38e:	80 91 0e 01 	lds	r24, 0x010E
 392:	90 91 0f 01 	lds	r25, 0x010F
 396:	01 96       	adiw	r24, 0x01	; 1
 398:	90 93 0f 01 	sts	0x010F, r25
 39c:	80 93 0e 01 	sts	0x010E, r24
					break; 
 3a0:	c8 c0       	rjmp	.+400    	; 0x532 <multiplex_func+0x334>
				case 5:
					 
					num_2_off();
 3a2:	0e 94 c8 00 	call	0x190	; 0x190 <num_2_off>
					num_3_off();
 3a6:	0e 94 ce 00 	call	0x19c	; 0x19c <num_3_off>
					num_4_off();
 3aa:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <num_4_off>
					num_1_off();
 3ae:	0e 94 c5 00 	call	0x18a	; 0x18a <num_1_off>
					num_6_off();
 3b2:	0e 94 df 00 	call	0x1be	; 0x1be <num_6_off>
					num_7_off();
 3b6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <num_7_off>
					num_8_off();
 3ba:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <num_8_off>
					num_9_off();
 3be:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <num_9_off>
					num_0_off(); 
 3c2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <num_0_off>
					num_5_on();
 3c6:	0e 94 9f 00 	call	0x13e	; 0x13e <num_5_on>
					arb2++;
 3ca:	80 91 0e 01 	lds	r24, 0x010E
 3ce:	90 91 0f 01 	lds	r25, 0x010F
 3d2:	01 96       	adiw	r24, 0x01	; 1
 3d4:	90 93 0f 01 	sts	0x010F, r25
 3d8:	80 93 0e 01 	sts	0x010E, r24
					break;
 3dc:	aa c0       	rjmp	.+340    	; 0x532 <multiplex_func+0x334>
				case 6:
					 
					num_2_off();
 3de:	0e 94 c8 00 	call	0x190	; 0x190 <num_2_off>
					num_3_off();
 3e2:	0e 94 ce 00 	call	0x19c	; 0x19c <num_3_off>
					num_4_off();
 3e6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <num_4_off>
					num_5_off();
 3ea:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <num_5_off>
					num_1_off();
 3ee:	0e 94 c5 00 	call	0x18a	; 0x18a <num_1_off>
					num_7_off();
 3f2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <num_7_off>
					num_8_off();
 3f6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <num_8_off>
					num_9_off();
 3fa:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <num_9_off>
					num_0_off(); 
 3fe:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <num_0_off>
					num_6_on();
 402:	0e 94 a5 00 	call	0x14a	; 0x14a <num_6_on>
					arb2++;
 406:	80 91 0e 01 	lds	r24, 0x010E
 40a:	90 91 0f 01 	lds	r25, 0x010F
 40e:	01 96       	adiw	r24, 0x01	; 1
 410:	90 93 0f 01 	sts	0x010F, r25
 414:	80 93 0e 01 	sts	0x010E, r24
					break;
 418:	8c c0       	rjmp	.+280    	; 0x532 <multiplex_func+0x334>
				case 7:
					
					num_2_off();
 41a:	0e 94 c8 00 	call	0x190	; 0x190 <num_2_off>
					num_3_off();
 41e:	0e 94 ce 00 	call	0x19c	; 0x19c <num_3_off>
					num_4_off();
 422:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <num_4_off>
					num_5_off();
 426:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <num_5_off>
					num_6_off();
 42a:	0e 94 df 00 	call	0x1be	; 0x1be <num_6_off>
					num_1_off();
 42e:	0e 94 c5 00 	call	0x18a	; 0x18a <num_1_off>
					num_8_off();
 432:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <num_8_off>
					num_9_off();
 436:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <num_9_off>
					num_0_off(); 
 43a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <num_0_off>
					num_7_on(); 
 43e:	0e 94 ac 00 	call	0x158	; 0x158 <num_7_on>
					arb2++;
 442:	80 91 0e 01 	lds	r24, 0x010E
 446:	90 91 0f 01 	lds	r25, 0x010F
 44a:	01 96       	adiw	r24, 0x01	; 1
 44c:	90 93 0f 01 	sts	0x010F, r25
 450:	80 93 0e 01 	sts	0x010E, r24
					break;
 454:	6e c0       	rjmp	.+220    	; 0x532 <multiplex_func+0x334>
				case 8:
					 
					num_2_off();
 456:	0e 94 c8 00 	call	0x190	; 0x190 <num_2_off>
					num_3_off();
 45a:	0e 94 ce 00 	call	0x19c	; 0x19c <num_3_off>
					num_4_off();
 45e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <num_4_off>
					num_5_off();
 462:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <num_5_off>
					num_6_off();
 466:	0e 94 df 00 	call	0x1be	; 0x1be <num_6_off>
					num_7_off();
 46a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <num_7_off>
					num_1_off();
 46e:	0e 94 c5 00 	call	0x18a	; 0x18a <num_1_off>
					num_9_off();
 472:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <num_9_off>
					num_0_off(); 
 476:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <num_0_off>
					num_8_on();
 47a:	0e 94 b0 00 	call	0x160	; 0x160 <num_8_on>
					arb2++;
 47e:	80 91 0e 01 	lds	r24, 0x010E
 482:	90 91 0f 01 	lds	r25, 0x010F
 486:	01 96       	adiw	r24, 0x01	; 1
 488:	90 93 0f 01 	sts	0x010F, r25
 48c:	80 93 0e 01 	sts	0x010E, r24
					break; 
 490:	50 c0       	rjmp	.+160    	; 0x532 <multiplex_func+0x334>
				case 9:
					
					num_2_off();
 492:	0e 94 c8 00 	call	0x190	; 0x190 <num_2_off>
					num_3_off();
 496:	0e 94 ce 00 	call	0x19c	; 0x19c <num_3_off>
					num_4_off();
 49a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <num_4_off>
					num_5_off();
 49e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <num_5_off>
					num_6_off();
 4a2:	0e 94 df 00 	call	0x1be	; 0x1be <num_6_off>
					num_7_off();
 4a6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <num_7_off>
					num_8_off();
 4aa:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <num_8_off>
					num_1_off();
 4ae:	0e 94 c5 00 	call	0x18a	; 0x18a <num_1_off>
					num_0_off(); 
 4b2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <num_0_off>
					num_9_on(); 
 4b6:	0e 94 b8 00 	call	0x170	; 0x170 <num_9_on>
					arb2++;
 4ba:	80 91 0e 01 	lds	r24, 0x010E
 4be:	90 91 0f 01 	lds	r25, 0x010F
 4c2:	01 96       	adiw	r24, 0x01	; 1
 4c4:	90 93 0f 01 	sts	0x010F, r25
 4c8:	80 93 0e 01 	sts	0x010E, r24
					break;
 4cc:	32 c0       	rjmp	.+100    	; 0x532 <multiplex_func+0x334>
				case 0:
					 
					num_2_off();
 4ce:	0e 94 c8 00 	call	0x190	; 0x190 <num_2_off>
					num_3_off();
 4d2:	0e 94 ce 00 	call	0x19c	; 0x19c <num_3_off>
					num_4_off();
 4d6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <num_4_off>
					num_5_off();
 4da:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <num_5_off>
					num_6_off();
 4de:	0e 94 df 00 	call	0x1be	; 0x1be <num_6_off>
					num_7_off();
 4e2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <num_7_off>
					num_8_off();
 4e6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <num_8_off>
					num_9_off();
 4ea:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <num_9_off>
					num_1_off(); 
 4ee:	0e 94 c5 00 	call	0x18a	; 0x18a <num_1_off>
					num_0_on();
 4f2:	0e 94 be 00 	call	0x17c	; 0x17c <num_0_on>
					arb2++;
 4f6:	80 91 0e 01 	lds	r24, 0x010E
 4fa:	90 91 0f 01 	lds	r25, 0x010F
 4fe:	01 96       	adiw	r24, 0x01	; 1
 500:	90 93 0f 01 	sts	0x010F, r25
 504:	80 93 0e 01 	sts	0x010E, r24
					break;
 508:	14 c0       	rjmp	.+40     	; 0x532 <multiplex_func+0x334>
				default:  
					num_0_off(); 
 50a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <num_0_off>
					num_1_off(); 
 50e:	0e 94 c5 00 	call	0x18a	; 0x18a <num_1_off>
					num_2_off();
 512:	0e 94 c8 00 	call	0x190	; 0x190 <num_2_off>
					num_3_off();
 516:	0e 94 ce 00 	call	0x19c	; 0x19c <num_3_off>
					num_4_off();
 51a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <num_4_off>
					num_5_off();
 51e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <num_5_off>
					num_6_off();
 522:	0e 94 df 00 	call	0x1be	; 0x1be <num_6_off>
					num_7_off();
 526:	0e 94 e6 00 	call	0x1cc	; 0x1cc <num_7_off>
					num_8_off();
 52a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <num_8_off>
					num_9_off(); 
 52e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <num_9_off>
					break;
			} 
			if (arb2 > entries_col){
 532:	20 91 0e 01 	lds	r18, 0x010E
 536:	30 91 0f 01 	lds	r19, 0x010F
 53a:	80 91 00 01 	lds	r24, 0x0100
 53e:	90 91 01 01 	lds	r25, 0x0101
 542:	82 17       	cp	r24, r18
 544:	93 07       	cpc	r25, r19
 546:	24 f4       	brge	.+8      	; 0x550 <multiplex_func+0x352>
				arb2 = 0;
 548:	10 92 0f 01 	sts	0x010F, r1
 54c:	10 92 0e 01 	sts	0x010E, r1
 550:	08 95       	ret

00000552 <__vector_11>:
}




ISR (TIMER1_COMPA_vect){ 
 552:	1f 92       	push	r1
 554:	0f 92       	push	r0
 556:	0f b6       	in	r0, 0x3f	; 63
 558:	0f 92       	push	r0
 55a:	11 24       	eor	r1, r1
 55c:	2f 93       	push	r18
 55e:	3f 93       	push	r19
 560:	4f 93       	push	r20
 562:	5f 93       	push	r21
 564:	6f 93       	push	r22
 566:	7f 93       	push	r23
 568:	8f 93       	push	r24
 56a:	9f 93       	push	r25
 56c:	af 93       	push	r26
 56e:	bf 93       	push	r27
 570:	ef 93       	push	r30
 572:	ff 93       	push	r31

	multiplex_func(num_time); 
 574:	82 e0       	ldi	r24, 0x02	; 2
 576:	91 e0       	ldi	r25, 0x01	; 1
 578:	0e 94 ff 00 	call	0x1fe	; 0x1fe <multiplex_func>
	num_time[0][0]  += tim4; */
	/*if (timsec > 59){
		timsec = 0; 
		num_time[0][3]++;
	}*/
	if (num_time[0][3] > 9){
 57c:	80 91 08 01 	lds	r24, 0x0108
 580:	90 91 09 01 	lds	r25, 0x0109
 584:	0a 97       	sbiw	r24, 0x0a	; 10
 586:	4c f0       	brlt	.+18     	; 0x59a <__vector_11+0x48>
		num_time[0][3] = 0;
 588:	e2 e0       	ldi	r30, 0x02	; 2
 58a:	f1 e0       	ldi	r31, 0x01	; 1
 58c:	17 82       	std	Z+7, r1	; 0x07
 58e:	16 82       	std	Z+6, r1	; 0x06
		num_time[0][2]++;
 590:	84 81       	ldd	r24, Z+4	; 0x04
 592:	95 81       	ldd	r25, Z+5	; 0x05
 594:	01 96       	adiw	r24, 0x01	; 1
 596:	95 83       	std	Z+5, r25	; 0x05
 598:	84 83       	std	Z+4, r24	; 0x04
	}
	if ( ( num_time[0][2] == 6) && ( num_time[0][3]  == 0) ) {
 59a:	80 91 06 01 	lds	r24, 0x0106
 59e:	90 91 07 01 	lds	r25, 0x0107
 5a2:	06 97       	sbiw	r24, 0x06	; 6
 5a4:	89 f4       	brne	.+34     	; 0x5c8 <__vector_11+0x76>
 5a6:	80 91 08 01 	lds	r24, 0x0108
 5aa:	90 91 09 01 	lds	r25, 0x0109
 5ae:	89 2b       	or	r24, r25
 5b0:	59 f4       	brne	.+22     	; 0x5c8 <__vector_11+0x76>
		num_time[0][2] = 0; 
 5b2:	e2 e0       	ldi	r30, 0x02	; 2
 5b4:	f1 e0       	ldi	r31, 0x01	; 1
 5b6:	15 82       	std	Z+5, r1	; 0x05
 5b8:	14 82       	std	Z+4, r1	; 0x04
		num_time[0][3] = 0;
 5ba:	17 82       	std	Z+7, r1	; 0x07
 5bc:	16 82       	std	Z+6, r1	; 0x06
		num_time[0][1] ++;
 5be:	82 81       	ldd	r24, Z+2	; 0x02
 5c0:	93 81       	ldd	r25, Z+3	; 0x03
 5c2:	01 96       	adiw	r24, 0x01	; 1
 5c4:	93 83       	std	Z+3, r25	; 0x03
 5c6:	82 83       	std	Z+2, r24	; 0x02
	}
	if (num_time[0][1] > 9){
 5c8:	80 91 04 01 	lds	r24, 0x0104
 5cc:	90 91 05 01 	lds	r25, 0x0105
 5d0:	0a 97       	sbiw	r24, 0x0a	; 10
 5d2:	4c f0       	brlt	.+18     	; 0x5e6 <__vector_11+0x94>
		num_time[0][1] = 0;
 5d4:	e2 e0       	ldi	r30, 0x02	; 2
 5d6:	f1 e0       	ldi	r31, 0x01	; 1
 5d8:	13 82       	std	Z+3, r1	; 0x03
 5da:	12 82       	std	Z+2, r1	; 0x02
		num_time[0][0]++;
 5dc:	80 81       	ld	r24, Z
 5de:	91 81       	ldd	r25, Z+1	; 0x01
 5e0:	01 96       	adiw	r24, 0x01	; 1
 5e2:	91 83       	std	Z+1, r25	; 0x01
 5e4:	80 83       	st	Z, r24
	}
	if ( (num_time[0][0] == 2) && (num_time[0][1] == 4) && (num_time[0][2] == 0) && (num_time[0][3] == 0) ){
 5e6:	80 91 02 01 	lds	r24, 0x0102
 5ea:	90 91 03 01 	lds	r25, 0x0103
 5ee:	02 97       	sbiw	r24, 0x02	; 2
 5f0:	c1 f4       	brne	.+48     	; 0x622 <__vector_11+0xd0>
 5f2:	80 91 04 01 	lds	r24, 0x0104
 5f6:	90 91 05 01 	lds	r25, 0x0105
 5fa:	04 97       	sbiw	r24, 0x04	; 4
 5fc:	91 f4       	brne	.+36     	; 0x622 <__vector_11+0xd0>
 5fe:	80 91 06 01 	lds	r24, 0x0106
 602:	90 91 07 01 	lds	r25, 0x0107
 606:	89 2b       	or	r24, r25
 608:	61 f4       	brne	.+24     	; 0x622 <__vector_11+0xd0>
 60a:	80 91 08 01 	lds	r24, 0x0108
 60e:	90 91 09 01 	lds	r25, 0x0109
 612:	89 2b       	or	r24, r25
 614:	31 f4       	brne	.+12     	; 0x622 <__vector_11+0xd0>
		num_time[0][3] = 0;
		num_time[0][2] = 0;
		num_time[0][1] = 0;
 616:	e2 e0       	ldi	r30, 0x02	; 2
 618:	f1 e0       	ldi	r31, 0x01	; 1
 61a:	13 82       	std	Z+3, r1	; 0x03
 61c:	12 82       	std	Z+2, r1	; 0x02
		num_time[0][0] = 0;
 61e:	11 82       	std	Z+1, r1	; 0x01
 620:	10 82       	st	Z, r1
	} 

isr_count ++;
 622:	80 91 0c 01 	lds	r24, 0x010C
 626:	90 91 0d 01 	lds	r25, 0x010D
 62a:	01 96       	adiw	r24, 0x01	; 1
 62c:	90 93 0d 01 	sts	0x010D, r25
 630:	80 93 0c 01 	sts	0x010C, r24

	timsec++;
 634:	20 91 0a 01 	lds	r18, 0x010A
 638:	30 91 0b 01 	lds	r19, 0x010B
 63c:	2f 5f       	subi	r18, 0xFF	; 255
 63e:	3f 4f       	sbci	r19, 0xFF	; 255
 640:	30 93 0b 01 	sts	0x010B, r19
 644:	20 93 0a 01 	sts	0x010A, r18
if (isr_count >= 1250){
 648:	82 3e       	cpi	r24, 0xE2	; 226
 64a:	94 40       	sbci	r25, 0x04	; 4
 64c:	5c f0       	brlt	.+22     	; 0x664 <__vector_11+0x112>
	//timsec++;
	num_time[0][3]++;
 64e:	e2 e0       	ldi	r30, 0x02	; 2
 650:	f1 e0       	ldi	r31, 0x01	; 1
 652:	86 81       	ldd	r24, Z+6	; 0x06
 654:	97 81       	ldd	r25, Z+7	; 0x07
 656:	01 96       	adiw	r24, 0x01	; 1
 658:	97 83       	std	Z+7, r25	; 0x07
 65a:	86 83       	std	Z+6, r24	; 0x06
	isr_count = 0;
 65c:	10 92 0d 01 	sts	0x010D, r1
 660:	10 92 0c 01 	sts	0x010C, r1
	num_1_tog(); 
	*/   
	  
	
	
} 
 664:	ff 91       	pop	r31
 666:	ef 91       	pop	r30
 668:	bf 91       	pop	r27
 66a:	af 91       	pop	r26
 66c:	9f 91       	pop	r25
 66e:	8f 91       	pop	r24
 670:	7f 91       	pop	r23
 672:	6f 91       	pop	r22
 674:	5f 91       	pop	r21
 676:	4f 91       	pop	r20
 678:	3f 91       	pop	r19
 67a:	2f 91       	pop	r18
 67c:	0f 90       	pop	r0
 67e:	0f be       	out	0x3f, r0	; 63
 680:	0f 90       	pop	r0
 682:	1f 90       	pop	r1
 684:	18 95       	reti

00000686 <__tablejump2__>:
 686:	ee 0f       	add	r30, r30
 688:	ff 1f       	adc	r31, r31
 68a:	05 90       	lpm	r0, Z+
 68c:	f4 91       	lpm	r31, Z
 68e:	e0 2d       	mov	r30, r0
 690:	09 94       	ijmp

00000692 <_exit>:
 692:	f8 94       	cli

00000694 <__stop_program>:
 694:	ff cf       	rjmp	.-2      	; 0x694 <__stop_program>
